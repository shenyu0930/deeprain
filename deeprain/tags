!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	log.h	/^        DEBUG = 1;$/;"	e	enum:deeprain::LogLevel::Level
ERROR	log.h	/^        ERROR = 4;$/;"	e	enum:deeprain::LogLevel::Level
FATAL	log.h	/^        FATAL = 5;$/;"	e	enum:deeprain::LogLevel::Level
FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:deeprain	inherits:LogAppender
INFO	log.h	/^        INFO = 2;$/;"	e	enum:deeprain::LogLevel::Level
Level	log.h	/^    enum Level {$/;"	g	class:deeprain::LogLevel	access:public
LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:deeprain
LogEvent	log.h	/^    LogEvent();$/;"	p	class:deeprain::LogEvent	access:public	signature:()
LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:deeprain
LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:deeprain
LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:deeprain
Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:deeprain::Logger	access:public	signature:(const std::string& name = Ó)
Logger	log.h	/^class Logger {$/;"	c	namespace:deeprain
StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:deeprain	inherits:LogAppender
WARN	log.h	/^        WARN = 3;$/;"	e	enum:deeprain::LogLevel::Level
__DEEPRAIN_LOG_H__	log.h	2;"	d
addAppender	log.cc	/^void addAppender(LogAppender::ptr appender);$/;"	p	namespace:deeprain	file:	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:deeprain::Logger	access:public	signature:(LogAppender::ptr appender)
debug	log.cc	/^void debug(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain	log.cc	/^namespace deeprain {$/;"	n	file:
deeprain	log.h	/^namespace deeprain {$/;"	n
deeprain::FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:deeprain	inherits:LogAppender
deeprain::LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:deeprain
deeprain::LogAppender::log	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event);$/;"	p	class:deeprain::LogAppender	access:public	signature:(LogLevel::Level, LogEvent::ptr event)
deeprain::LogAppender::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:deeprain::LogAppender	access:private
deeprain::LogAppender::ptr	log.h	/^    std::shared_ptr<LogAppender> ptr;$/;"	m	class:deeprain::LogAppender	access:public
deeprain::LogAppender::~LogAppender	log.h	/^    virtual ~LogAppender();$/;"	p	class:deeprain::LogAppender	access:public	signature:()
deeprain::LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:deeprain
deeprain::LogEvent::LogEvent	log.h	/^    LogEvent();$/;"	p	class:deeprain::LogEvent	access:public	signature:()
deeprain::LogEvent::m_content	log.h	/^    std::string m_content;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_elapse	log.h	/^    uint32_t m_elapse = 0;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_fiberId	log.h	/^    uint32_t m_fiberId = 0;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_file	log.h	/^    const char* m_file = nullptr;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_line	log.h	/^    int32_t m_line = 0;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_threadId	log.h	/^    uint32_t m_threadId = 0;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::m_time	log.h	/^    uint64_t m_time = 0;$/;"	m	class:deeprain::LogEvent	access:private
deeprain::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:deeprain::LogEvent	access:public
deeprain::LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:deeprain
deeprain::LogFormatter::format	log.h	/^    std::string format(LogEvent::ptr event);$/;"	p	class:deeprain::LogFormatter	access:public	signature:(LogEvent::ptr event)
deeprain::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:deeprain::LogFormatter	access:public
deeprain::LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:deeprain
deeprain::LogLevel::DEBUG	log.h	/^        DEBUG = 1;$/;"	e	enum:deeprain::LogLevel::Level
deeprain::LogLevel::ERROR	log.h	/^        ERROR = 4;$/;"	e	enum:deeprain::LogLevel::Level
deeprain::LogLevel::FATAL	log.h	/^        FATAL = 5;$/;"	e	enum:deeprain::LogLevel::Level
deeprain::LogLevel::INFO	log.h	/^        INFO = 2;$/;"	e	enum:deeprain::LogLevel::Level
deeprain::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:deeprain::LogLevel	access:public
deeprain::LogLevel::WARN	log.h	/^        WARN = 3;$/;"	e	enum:deeprain::LogLevel::Level
deeprain::Logger	log.h	/^class Logger {$/;"	c	namespace:deeprain
deeprain::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:deeprain::Logger	access:public	signature:(const std::string& name = Ó)
deeprain::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:deeprain::Logger	access:public	signature:(LogAppender::ptr appender)
deeprain::Logger::debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:deeprain::Logger	access:public	signature:(LogAppender::ptr appender)
deeprain::Logger::error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain::Logger::fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain::Logger::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:deeprain::Logger	access:public	signature:() const
deeprain::Logger::info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain::Logger::logger	log.h	/^    void logger(LogLevel::Level level, const LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogLevel::Level level, const LogEvent::ptr event)
deeprain::Logger::m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:deeprain::Logger	access:private
deeprain::Logger::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:deeprain::Logger	access:private
deeprain::Logger::m_name	log.h	/^    std::string m_name;$/;"	m	class:deeprain::Logger	access:private
deeprain::Logger::ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:deeprain::Logger	access:public
deeprain::Logger::setLevel	log.h	/^    void setLevel(LogLevel::Level val) { m_level = val; }$/;"	f	class:deeprain::Logger	access:public	signature:(LogLevel::Level val)
deeprain::Logger::warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
deeprain::StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:deeprain	inherits:LogAppender
deeprain::addAppender	log.cc	/^void addAppender(LogAppender::ptr appender);$/;"	p	namespace:deeprain	file:	signature:(LogAppender::ptr appender)
deeprain::debug	log.cc	/^void debug(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
deeprain::delAppender	log.cc	/^void delAppender(LogAppender::ptr appender);$/;"	p	namespace:deeprain	file:	signature:(LogAppender::ptr appender)
deeprain::error	log.cc	/^void error(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
deeprain::fatal	log.cc	/^void fatal(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
deeprain::info	log.cc	/^void info(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
deeprain::warn	log.cc	/^void warn(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
delAppender	log.cc	/^void delAppender(LogAppender::ptr appender);$/;"	p	namespace:deeprain	file:	signature:(LogAppender::ptr appender)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:deeprain::Logger	access:public	signature:(LogAppender::ptr appender)
error	log.cc	/^void error(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
fatal	log.cc	/^void fatal(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
format	log.h	/^    std::string format(LogEvent::ptr event);$/;"	p	class:deeprain::LogFormatter	access:public	signature:(LogEvent::ptr event)
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:deeprain::Logger	access:public	signature:() const
info	log.cc	/^void info(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event);$/;"	p	class:deeprain::LogAppender	access:public	signature:(LogLevel::Level, LogEvent::ptr event)
logger	log.h	/^    void logger(LogLevel::Level level, const LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogLevel::Level level, const LogEvent::ptr event)
m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:deeprain::Logger	access:private
m_content	log.h	/^    std::string m_content;$/;"	m	class:deeprain::LogEvent	access:private
m_elapse	log.h	/^    uint32_t m_elapse = 0;$/;"	m	class:deeprain::LogEvent	access:private
m_fiberId	log.h	/^    uint32_t m_fiberId = 0;$/;"	m	class:deeprain::LogEvent	access:private
m_file	log.h	/^    const char* m_file = nullptr;$/;"	m	class:deeprain::LogEvent	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:deeprain::LogAppender	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:deeprain::Logger	access:private
m_line	log.h	/^    int32_t m_line = 0;$/;"	m	class:deeprain::LogEvent	access:private
m_name	log.h	/^    std::string m_name;$/;"	m	class:deeprain::Logger	access:private
m_threadId	log.h	/^    uint32_t m_threadId = 0;$/;"	m	class:deeprain::LogEvent	access:private
m_time	log.h	/^    uint64_t m_time = 0;$/;"	m	class:deeprain::LogEvent	access:private
ptr	log.h	/^    std::shared_ptr<LogAppender> ptr;$/;"	m	class:deeprain::LogAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:deeprain::LogEvent	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:deeprain::LogFormatter	access:public
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:deeprain::Logger	access:public
setLevel	log.h	/^    void setLevel(LogLevel::Level val) { m_level = val; }$/;"	f	class:deeprain::Logger	access:public	signature:(LogLevel::Level val)
warn	log.cc	/^void warn(LogEvent::ptr event) {$/;"	f	namespace:deeprain	signature:(LogEvent::ptr event)
warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:deeprain::Logger	access:public	signature:(LogEvent::ptr event)
~LogAppender	log.h	/^    virtual ~LogAppender();$/;"	p	class:deeprain::LogAppender	access:public	signature:()
